

.. _sphx_glr_auto_examples_03_second_level_models_plot_second_level_button_press.py:


GLM fitting in second level fMRI
================================

Full step-by-step example of fitting a GLM to perform a second level analysis
in experimental data and visualizing the results.

More specifically:

1. A sequence of subject fMRI button press contrasts is downloaded.
2. a mask of the useful brain volume is computed
3. A one-sample t-test is applied to the brain maps

(as fixed effects, then contrast estimation)




.. code-block:: python


    import pandas as pd
    from nilearn import plotting
    from scipy.stats import norm
    import matplotlib.pyplot as plt

    from nilearn.datasets import fetch_localizer_contrasts
    from nistats.second_level_model import SecondLevelModel







Fetch dataset
--------------
We download a list of left vs right button press contrasts from a
localizer dataset.



.. code-block:: python

    n_subjects = 16
    data = fetch_localizer_contrasts(["left vs right button press"], n_subjects,
                                     get_tmaps=True)







Display subject t_maps
----------------------
We plot a grid with all the subjects t-maps thresholded at t = 2 for
simple visualization purposes. The button press effect is visible among
all subjects



.. code-block:: python

    subjects = [subject_data[0] for subject_data in data['ext_vars']]
    fig, axes = plt.subplots(nrows=4, ncols=4)
    for cidx, tmap in enumerate(data['tmaps']):
        plotting.plot_glass_brain(tmap, colorbar=False, threshold=2.0,
                                  title=subjects[cidx],
                                  axes=axes[int(cidx / 4), int(cidx % 4)],
                                  plot_abs=False, display_mode='z')
    fig.suptitle('subjects t_map left-right button press')
    plt.show()




.. image:: /auto_examples/03_second_level_models/images/sphx_glr_plot_second_level_button_press_001.png
    :align: center




Estimate second level model
---------------------------
We define the input maps and the design matrix for the second level model
and fit it.



.. code-block:: python

    second_level_input = data['cmaps']
    design_matrix = pd.DataFrame([1] * len(second_level_input),
                                 columns=['intercept'])

    second_level_model = SecondLevelModel(smoothing_fwhm=8.0)
    second_level_model = second_level_model.fit(second_level_input,
                                                design_matrix=design_matrix)







To estimate the contrast is very simple. We can just provide the column
name of the design matrix.



.. code-block:: python

    z_map = second_level_model.compute_contrast(output_type='z_score')







We threshold the second level contrast at uncorrected p < 0.001 and plot



.. code-block:: python

    p_val = 0.001
    z_th = norm.isf(p_val)
    display = plotting.plot_glass_brain(
        z_map, threshold=z_th, colorbar=True, plot_abs=False, display_mode='z',
        title='group left-right button press (unc p<0.001')

    plotting.show()



.. image:: /auto_examples/03_second_level_models/images/sphx_glr_plot_second_level_button_press_002.png
    :align: center




**Total running time of the script:** ( 0 minutes  13.160 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_second_level_button_press.py <plot_second_level_button_press.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_second_level_button_press.ipynb <plot_second_level_button_press.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
