.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_03_second_level_models_plot_second_level_two_sample_test.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_second_level_models_plot_second_level_two_sample_test.py:


Second-level fMRI model: a two-sample test
==========================================

Full step-by-step example of fitting a GLM to perform a second level analysis
in experimental data and visualizing the results.

More specifically:

1. A sample of n=16 visual activity fMRIs are downloaded.
2. A two-sample t-test is applied to the brain maps in order to see the effect
   of the contrast difference across subjects.

The contrast is between responses to vertical versus horizontal
checkerboards that are retinotopically distinct. At the individual
level, these stimuli are sometimes used to map the borders of primary
visual areas. At the group level, such a mapping is not possible. Yet,
we may observe some significant effects in these areas.


.. code-block:: default


    import pandas as pd
    from nilearn import plotting
    from nilearn.datasets import fetch_localizer_contrasts








Fetch dataset
--------------
We download a list of left vs right button press contrasts from a
localizer dataset.


.. code-block:: default

    n_subjects = 16
    sample_vertical = fetch_localizer_contrasts(
        ["vertical checkerboard"], n_subjects, get_tmaps=True)
    sample_horizontal = fetch_localizer_contrasts(
        ["horizontal checkerboard"], n_subjects, get_tmaps=True)

    # What remains implicit here is that there is a one-to-one
    # correspondence between the two samples: the first image of both
    # samples comes from subject S1, the second from subject S2 etc.





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading data from https://osf.io/download/5d27ce321c5b4a001aa080fc/ ...
    Downloaded 239617 of 239617 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27d175a26b340018084d23/ ...
    Downloaded 229716 of 229716 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27e900a26b340017083df6/ ...
    Downloaded 245630 of 245630 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27f8a845253a001b3c3280/ ...
    Downloaded 236474 of 236474 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d280aab45253a001b3c3d51/ ...
    Downloaded 241580 of 241580 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d280d0a114a42001704b6a7/ ...
    Downloaded 243409 of 243409 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d2829f7a26b34001708642d/ ...
    Downloaded 239263 of 239263 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d28399545253a001c3e9288/ ...
    Downloaded 237411 of 237411 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d2849cc114a42001804994e/ ...
    Downloaded 238751 of 238751 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d2852861c5b4a001c9ed5bf/ ...
    Downloaded 242067 of 242067 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d285c8b45253a00193d0295/ ...
    Downloaded 234137 of 234137 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d286b6b45253a001c3ec067/ ...
    Downloaded 217888 of 217888 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d2881cd1c5b4a001d9fe799/ ...
    Downloaded 229084 of 229084 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d288c4c114a42001804bfb6/ ...
    Downloaded 227720 of 227720 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d28ad481c5b4a001aa17d00/ ...
    Downloaded 217785 of 217785 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d28c24f114a42001904ea5b/ ...
    Downloaded 237625 of 237625 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    /home/emdupre/miniconda3/envs/nilearn/lib/python3.7/site-packages/numpy/lib/npyio.py:2372: VisibleDeprecationWarning: Reading unicode strings without specifying the encoding argument is deprecated. Set the encoding, use None for the system default.
      output = genfromtxt(fname, **kwargs)
    Downloading data from https://osf.io/download/5d27c7f01c5b4a001c9e778e/ ...
    Downloaded 238014 of 238014 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27d99fa26b340018085146/ ...
    Downloaded 229617 of 229617 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27ec4d45253a001c3e3f47/ ...
    Downloaded 245625 of 245625 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27fb1e1c5b4a001aa0ab78/ ...
    Downloaded 236680 of 236680 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d27ff2645253a001c3e4fb9/ ...
    Downloaded 241931 of 241931 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d280e3945253a001a3c4f15/ ...
    Downloaded 244625 of 244625 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d2827ff114a420018047f9a/ ...
    Downloaded 238098 of 238098 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d282ef61c5b4a001b9f3747/ ...
    Downloaded 238339 of 238339 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d284636114a42001704e0f6/ ...
    Downloaded 238686 of 238686 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d28516e45253a001a3c7e03/ ...
    Downloaded 241793 of 241793 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)
    Downloading data from https://osf.io/download/5d285cffa26b34001908db9c/ ...
    Downloaded 233559 of 233559 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d287486114a42001804af82/ ...
    Downloaded 217471 of 217471 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d287f8f114a4200170503d0/ ...
    Downloaded 229722 of 229722 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d288e101c5b4a001aa14e0f/ ...
    Downloaded 227559 of 227559 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d28aa701c5b4a001aa1794c/ ...
    Downloaded 217385 of 217385 bytes (100.0%,    0.0s remaining) ...done. (2 seconds, 0 min)
    Downloading data from https://osf.io/download/5d28b579114a42001804e2cd/ ...
    Downloaded 237588 of 237588 bytes (100.0%,    0.0s remaining) ...done. (3 seconds, 0 min)




Estimate second level model
---------------------------
We define the input maps and the design matrix for the second level model
and fit it.


.. code-block:: default

    second_level_input = sample_vertical['cmaps'] + sample_horizontal['cmaps']








Next, we model the effect of conditions (sample 1 vs sample 2).


.. code-block:: default

    import numpy as np
    condition_effect = np.hstack(([1] * n_subjects, [- 1] * n_subjects))








Subsequently, we can model the subject effect: each subject is observed in sample 1 and sample 2.


.. code-block:: default

    subject_effect = np.vstack((np.eye(n_subjects), np.eye(n_subjects)))
    subjects = ['S%02d' % i for i in range(1, n_subjects + 1)]








We then assemble those in a design matrix and


.. code-block:: default

    design_matrix = pd.DataFrame(
        np.hstack((condition_effect[:, np.newaxis], subject_effect)),
        columns=['vertical vs horizontal'] + subjects)








plot the design_matrix.


.. code-block:: default

    from nistats.reporting import plot_design_matrix
    plot_design_matrix(design_matrix)




.. image:: /auto_examples/03_second_level_models/images/sphx_glr_plot_second_level_two_sample_test_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.axes._subplots.AxesSubplot object at 0x7f6315df8550>



We formally specify the analysis model and fit it.


.. code-block:: default

    from nistats.second_level_model import SecondLevelModel
    second_level_model = SecondLevelModel().fit(
        second_level_input, design_matrix=design_matrix)








Estimating the contrast is very simple. We can just provide the column
name of the design matrix.


.. code-block:: default

    z_map = second_level_model.compute_contrast('vertical vs horizontal',
                                                output_type='z_score')








We threshold the second level contrast and plot it.


.. code-block:: default

    threshold = 3.1  # correponds to  p < .001, uncorrected
    display = plotting.plot_glass_brain(
        z_map, threshold=threshold, colorbar=True, plot_abs=False,
        title='vertical vs horizontal checkerboard (unc p<0.001')

    plotting.show()




.. image:: /auto_examples/03_second_level_models/images/sphx_glr_plot_second_level_two_sample_test_002.png
    :class: sphx-glr-single-img





Unsurprisingly, we see activity in the primary visual cortex, both positive
and negative.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.623 seconds)


.. _sphx_glr_download_auto_examples_03_second_level_models_plot_second_level_two_sample_test.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_second_level_two_sample_test.py <plot_second_level_two_sample_test.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_second_level_two_sample_test.ipynb <plot_second_level_two_sample_test.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
