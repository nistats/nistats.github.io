.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_02_first_level_models_plot_fixed_effects.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_first_level_models_plot_fixed_effects.py:

Example of explicit fixed effects fMRI model fitting
====================================================

This example illustrates how to run a fixed effects model based on
pre-computed statistics. This is helpful when the initial models
have to be fit separately.

For details on the data, please see:

Dehaene-Lambertz G, Dehaene S, Anton JL, Campagne A, Ciuciu P, Dehaene
G, Denghien I, Jobert A, LeBihan D, Sigman M, Pallier C, Poline
JB. Functional segregation of cortical language areas by sentence
repetition. Hum Brain Mapp. 2006: 27:360--371.
http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2653076#R11

Please see `Simple example of two-session fMRI model fitting
<https://nistats.github.io/auto_examples/02_first_level_models/plot_fiac_analysis.html>`_
example for details.  The main difference is that
the fixed-effects model is run explicitly here,
after GLM fitting on two sessions.


Prepare data and analysis parameters
--------------------------------------

Inspecting 'data', we note that there are two sessions


.. code-block:: default


    from nistats import datasets
    data = datasets.fetch_fiac_first_level()
    fmri_img = [data['func1'], data['func2']]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Dataset created in /home/kshitij/nilearn_data/fiac_nistats

    Missing functional scan for session 1.
    Data absent, downloading...
    Downloading data from http://nipy.sourceforge.net/data-packages/nipy-data-0.2.tar.gz ...
    Downloaded 114688 of 81515168 bytes (0.1%, 15.4min remaining)    Downloaded 311296 of 81515168 bytes (0.4%, 10.1min remaining)    Downloaded 532480 of 81515168 bytes (0.7%,  8.5min remaining)    Downloaded 770048 of 81515168 bytes (0.9%,  7.6min remaining)    Downloaded 999424 of 81515168 bytes (1.2%,  7.2min remaining)    Downloaded 1245184 of 81515168 bytes (1.5%,  7.0min remaining)    Downloaded 1523712 of 81515168 bytes (1.9%,  6.6min remaining)    Downloaded 1900544 of 81515168 bytes (2.3%,  6.0min remaining)    Downloaded 2547712 of 81515168 bytes (3.1%,  5.0min remaining)    Downloaded 3268608 of 81515168 bytes (4.0%,  4.2min remaining)    Downloaded 4063232 of 81515168 bytes (5.0%,  3.7min remaining)    Downloaded 4423680 of 81515168 bytes (5.4%,  3.7min remaining)    Downloaded 5242880 of 81515168 bytes (6.4%,  3.5min remaining)    Downloaded 6168576 of 81515168 bytes (7.6%,  3.2min remaining)    Downloaded 6332416 of 81515168 bytes (7.8%,  3.3min remaining)    Downloaded 7045120 of 81515168 bytes (8.6%,  3.1min remaining)    Downloaded 7602176 of 81515168 bytes (9.3%,  3.0min remaining)    Downloaded 8454144 of 81515168 bytes (10.4%,  2.9min remaining)    Downloaded 8732672 of 81515168 bytes (10.7%,  2.9min remaining)    Downloaded 9584640 of 81515168 bytes (11.8%,  2.8min remaining)    Downloaded 10387456 of 81515168 bytes (12.7%,  2.7min remaining)    Downloaded 10821632 of 81515168 bytes (13.3%,  2.7min remaining)    Downloaded 11665408 of 81515168 bytes (14.3%,  2.6min remaining)    Downloaded 12099584 of 81515168 bytes (14.8%,  2.6min remaining)    Downloaded 12828672 of 81515168 bytes (15.7%,  2.6min remaining)    Downloaded 13647872 of 81515168 bytes (16.7%,  2.5min remaining)    Downloaded 14049280 of 81515168 bytes (17.2%,  2.5min remaining)    Downloaded 14909440 of 81515168 bytes (18.3%,  2.4min remaining)    Downloaded 15024128 of 81515168 bytes (18.4%,  2.4min remaining)    Downloaded 15605760 of 81515168 bytes (19.1%,  2.4min remaining)    Downloaded 16211968 of 81515168 bytes (19.9%,  2.4min remaining)    Downloaded 17178624 of 81515168 bytes (21.1%,  2.3min remaining)    Downloaded 17408000 of 81515168 bytes (21.4%,  2.3min remaining)    Downloaded 18325504 of 81515168 bytes (22.5%,  2.2min remaining)    Downloaded 18604032 of 81515168 bytes (22.8%,  2.2min remaining)    Downloaded 19562496 of 81515168 bytes (24.0%,  2.2min remaining)    Downloaded 19800064 of 81515168 bytes (24.3%,  2.2min remaining)    Downloaded 20873216 of 81515168 bytes (25.6%,  2.1min remaining)    Downloaded 21012480 of 81515168 bytes (25.8%,  2.1min remaining)    Downloaded 21807104 of 81515168 bytes (26.8%,  2.1min remaining)    Downloaded 22192128 of 81515168 bytes (27.2%,  2.1min remaining)    Downloaded 23339008 of 81515168 bytes (28.6%,  2.0min remaining)    Downloaded 24166400 of 81515168 bytes (29.6%,  2.0min remaining)    Downloaded 24510464 of 81515168 bytes (30.1%,  2.0min remaining)    Downloaded 25280512 of 81515168 bytes (31.0%,  1.9min remaining)    Downloaded 25698304 of 81515168 bytes (31.5%,  1.9min remaining)    Downloaded 26517504 of 81515168 bytes (32.5%,  1.9min remaining)    Downloaded 26902528 of 81515168 bytes (33.0%,  1.9min remaining)    Downloaded 27729920 of 81515168 bytes (34.0%,  1.8min remaining)    Downloaded 28114944 of 81515168 bytes (34.5%,  1.8min remaining)    Downloaded 29081600 of 81515168 bytes (35.7%,  1.8min remaining)    Downloaded 29319168 of 81515168 bytes (36.0%,  1.8min remaining)    Downloaded 30466048 of 81515168 bytes (37.4%,  1.7min remaining)    Downloaded 30474240 of 81515168 bytes (37.4%,  1.7min remaining)    Downloaded 31367168 of 81515168 bytes (38.5%,  1.7min remaining)    Downloaded 31637504 of 81515168 bytes (38.8%,  1.7min remaining)    Downloaded 32481280 of 81515168 bytes (39.8%,  1.7min remaining)    Downloaded 32841728 of 81515168 bytes (40.3%,  1.7min remaining)    Downloaded 33669120 of 81515168 bytes (41.3%,  1.6min remaining)    Downloaded 34004992 of 81515168 bytes (41.7%,  1.6min remaining)    Downloaded 34775040 of 81515168 bytes (42.7%,  1.6min remaining)    Downloaded 35201024 of 81515168 bytes (43.2%,  1.6min remaining)    Downloaded 36175872 of 81515168 bytes (44.4%,  1.5min remaining)    Downloaded 36405248 of 81515168 bytes (44.7%,  1.5min remaining)    Downloaded 37216256 of 81515168 bytes (45.7%,  1.5min remaining)    Downloaded 37609472 of 81515168 bytes (46.1%,  1.5min remaining)    Downloaded 38436864 of 81515168 bytes (47.2%,  1.4min remaining)    Downloaded 38813696 of 81515168 bytes (47.6%,  1.4min remaining)    Downloaded 39723008 of 81515168 bytes (48.7%,  1.4min remaining)    Downloaded 39960576 of 81515168 bytes (49.0%,  1.4min remaining)    Downloaded 40730624 of 81515168 bytes (50.0%,  1.4min remaining)    Downloaded 41140224 of 81515168 bytes (50.5%,  1.4min remaining)    Downloaded 42033152 of 81515168 bytes (51.6%,  1.3min remaining)    Downloaded 42491904 of 81515168 bytes (52.1%,  1.3min remaining)    Downloaded 43532288 of 81515168 bytes (53.4%,  1.3min remaining)    Downloaded 44498944 of 81515168 bytes (54.6%,  1.2min remaining)    Downloaded 44892160 of 81515168 bytes (55.1%,  1.2min remaining)    Downloaded 45826048 of 81515168 bytes (56.2%,  1.2min remaining)    Downloaded 45899776 of 81515168 bytes (56.3%,  1.2min remaining)    Downloaded 47030272 of 81515168 bytes (57.7%,  1.1min remaining)    Downloaded 47112192 of 81515168 bytes (57.8%,  1.1min remaining)    Downloaded 47980544 of 81515168 bytes (58.9%,  1.1min remaining)    Downloaded 48316416 of 81515168 bytes (59.3%,  1.1min remaining)    Downloaded 49446912 of 81515168 bytes (60.7%,  1.1min remaining)    Downloaded 49618944 of 81515168 bytes (60.9%,  1.1min remaining)    Downloaded 50503680 of 81515168 bytes (62.0%,  1.0min remaining)    Downloaded 50667520 of 81515168 bytes (62.2%,  1.0min remaining)    Downloaded 51445760 of 81515168 bytes (63.1%,   59.7s remaining)    Downloaded 51830784 of 81515168 bytes (63.6%,   59.1s remaining)    Downloaded 52633600 of 81515168 bytes (64.6%,   57.2s remaining)    Downloaded 53026816 of 81515168 bytes (65.1%,   56.8s remaining)    Downloaded 53829632 of 81515168 bytes (66.0%,   54.9s remaining)    Downloaded 54231040 of 81515168 bytes (66.5%,   54.3s remaining)    Downloaded 55033856 of 81515168 bytes (67.5%,   52.4s remaining)    Downloaded 55435264 of 81515168 bytes (68.0%,   51.8s remaining)    Downloaded 56426496 of 81515168 bytes (69.2%,   49.4s remaining)    Downloaded 56639488 of 81515168 bytes (69.5%,   49.4s remaining)    Downloaded 57540608 of 81515168 bytes (70.6%,   47.4s remaining)    Downloaded 57925632 of 81515168 bytes (71.1%,   46.8s remaining)    Downloaded 58695680 of 81515168 bytes (72.0%,   45.1s remaining)    Downloaded 58966016 of 81515168 bytes (72.3%,   44.8s remaining)    Downloaded 59875328 of 81515168 bytes (73.5%,   42.7s remaining)    Downloaded 60252160 of 81515168 bytes (73.9%,   42.1s remaining)    Downloaded 60956672 of 81515168 bytes (74.8%,   40.6s remaining)    Downloaded 61448192 of 81515168 bytes (75.4%,   39.7s remaining)    Downloaded 62242816 of 81515168 bytes (76.4%,   38.0s remaining)    Downloaded 62652416 of 81515168 bytes (76.9%,   37.3s remaining)    Downloaded 63561728 of 81515168 bytes (78.0%,   35.3s remaining)    Downloaded 63692800 of 81515168 bytes (78.1%,   35.2s remaining)    Downloaded 64495616 of 81515168 bytes (79.1%,   33.5s remaining)    Downloaded 64897024 of 81515168 bytes (79.6%,   32.8s remaining)    Downloaded 65748992 of 81515168 bytes (80.7%,   31.0s remaining)    Downloaded 66101248 of 81515168 bytes (81.1%,   30.4s remaining)    Downloaded 66854912 of 81515168 bytes (82.0%,   28.9s remaining)    Downloaded 67272704 of 81515168 bytes (82.5%,   28.1s remaining)    Downloaded 68280320 of 81515168 bytes (83.8%,   25.9s remaining)    Downloaded 68485120 of 81515168 bytes (84.0%,   25.7s remaining)    Downloaded 69361664 of 81515168 bytes (85.1%,   23.9s remaining)    Downloaded 69648384 of 81515168 bytes (85.4%,   23.4s remaining)    Downloaded 70402048 of 81515168 bytes (86.4%,   21.8s remaining)    Downloaded 70836224 of 81515168 bytes (86.9%,   21.0s remaining)    Downloaded 71630848 of 81515168 bytes (87.9%,   19.4s remaining)    Downloaded 72040448 of 81515168 bytes (88.4%,   18.7s remaining)    Downloaded 73015296 of 81515168 bytes (89.6%,   16.7s remaining)    Downloaded 73244672 of 81515168 bytes (89.9%,   16.3s remaining)    Downloaded 74227712 of 81515168 bytes (91.1%,   14.3s remaining)    Downloaded 74448896 of 81515168 bytes (91.3%,   13.9s remaining)    Downloaded 75341824 of 81515168 bytes (92.4%,   12.1s remaining)    Downloaded 75726848 of 81515168 bytes (92.9%,   11.4s remaining)    Downloaded 76521472 of 81515168 bytes (93.9%,    9.8s remaining)    Downloaded 76775424 of 81515168 bytes (94.2%,    9.3s remaining)    Downloaded 77676544 of 81515168 bytes (95.3%,    7.5s remaining)    Downloaded 78061568 of 81515168 bytes (95.8%,    6.8s remaining)    Downloaded 78938112 of 81515168 bytes (96.8%,    5.0s remaining)    Downloaded 79101952 of 81515168 bytes (97.0%,    4.7s remaining)    Downloaded 79880192 of 81515168 bytes (98.0%,    3.2s remaining)    Downloaded 80297984 of 81515168 bytes (98.5%,    2.4s remaining)    Downloaded 81412096 of 81515168 bytes (99.9%,    0.2s remaining)    Downloaded 81502208 of 81515168 bytes (100.0%,    0.0s remaining)    Downloaded 81515168 of 81515168 bytes (100.0%,    0.0s remaining) ...done. (161 seconds, 2 min)
    Extracting data from /home/kshitij/nilearn_data/fiac_nistats/nipy-data-0.2.tar.gz..... done.




Create a mean image for plotting purpose


.. code-block:: default

    from nilearn.image import mean_img
    mean_img_ = mean_img(fmri_img[0])








The design matrices were pre-computed, we simply put them in a list of DataFrames


.. code-block:: default

    design_files = [data['design_matrix1'], data['design_matrix2']]
    import pandas as pd
    import numpy as np
    design_matrices = [pd.DataFrame(np.load(df)['X']) for df in design_files]








GLM estimation
----------------------------------
GLM specification. Note that the mask was provided in the dataset. So we use it.


.. code-block:: default


    from nistats.first_level_model import FirstLevelModel
    fmri_glm = FirstLevelModel(mask_img=data['mask'], smoothing_fwhm=5,
                               minimize_memory=True)








Compute fixed effects of the two runs and compute related images
For this, we first define the contrasts as we would do for a single session


.. code-block:: default

    n_columns = design_matrices[0].shape[1]
    contrast_val = np.hstack(([-1, -1, 1, 1], np.zeros(n_columns - 4)))








Statistics for the first session


.. code-block:: default

    from nilearn import plotting
    cut_coords = [-129, -126, 49]
    contrast_id = 'DSt_minus_SSt'

    fmri_glm = fmri_glm.fit(fmri_img[0], design_matrices=design_matrices[0])
    summary_statistics_session1 = fmri_glm.compute_contrast(
        contrast_val, output_type='all')
    plotting.plot_stat_map(
        summary_statistics_session1['z_score'],
        bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, first session'.format(contrast_id))




.. image:: /auto_examples/02_first_level_models/images/sphx_glr_plot_fixed_effects_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoSlicer object at 0x7fd70b71d0f0>



Statistics for the second session


.. code-block:: default


    fmri_glm = fmri_glm.fit(fmri_img[1], design_matrices=design_matrices[1])
    summary_statistics_session2 = fmri_glm.compute_contrast(
        contrast_val, output_type='all')
    plotting.plot_stat_map(
        summary_statistics_session2['z_score'],
        bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, second session'.format(contrast_id))




.. image:: /auto_examples/02_first_level_models/images/sphx_glr_plot_fixed_effects_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoSlicer object at 0x7fd70b8a6978>



Fixed effects statistics


.. code-block:: default

    from nistats.contrasts import compute_fixed_effects

    contrast_imgs = [summary_statistics_session1['effect_size'],
                     summary_statistics_session2['effect_size']]
    variance_imgs = [summary_statistics_session1['effect_variance'],
                     summary_statistics_session2['effect_variance']]

    fixed_fx_contrast, fixed_fx_variance, fixed_fx_stat = compute_fixed_effects(
        contrast_imgs, variance_imgs, data['mask'])
    plotting.plot_stat_map(
        fixed_fx_stat, bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, fixed effects'.format(contrast_id))




.. image:: /auto_examples/02_first_level_models/images/sphx_glr_plot_fixed_effects_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoSlicer object at 0x7fd736ea3630>



Not unexpectedly, the fixed effects version displays higher peaks than the input sessions. Computing fixed effects enhances the signal-to-noise ratio of the resulting brain maps
Note however that, technically, the output maps of the fixed effects map is a t statistic (not a z statistic)


.. code-block:: default


    plotting.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  45.635 seconds)


.. _sphx_glr_download_auto_examples_02_first_level_models_plot_fixed_effects.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_fixed_effects.py <plot_fixed_effects.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_fixed_effects.ipynb <plot_fixed_effects.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
